 
# Create your models here.
from django.db import models
from usuarios.models import Usuario
class Mascota(models.Model):
    SEXO_CHOICES = [
        ('M', 'Macho'),
        ('H', 'Hembra'),
    ]

    idMascota = models.AutoField(primary_key=True)
    nombre = models.CharField(max_length=100)
    nacimiento = models.DateField()
    especie = models.CharField(max_length=50)
    sexo = models.CharField(max_length=1, choices=SEXO_CHOICES)
    peso = models.DecimalField(max_digits=5, decimal_places=2)
    altura = models.DecimalField(max_digits=5, decimal_places=2)
    ancho = models.DecimalField(max_digits=5, decimal_places=2)
    raza = models.CharField(max_length=100)
    usuario = models.ForeignKey(Usuario, on_delete=models.CASCADE, related_name='mascotas')

    def __str__(self):
        return self.nombre
    
    
class Cita(models.Model):
    id = models.AutoField(primary_key=True)
    fecha = models.DateTimeField()
    veterinaria = models.CharField(max_length=255)
    doctor = models.CharField(max_length=255)
    problema = models.CharField(max_length=255)
    descripcion = models.TextField()
    id_mascota = models.ForeignKey(Mascota, on_delete=models.CASCADE)

    def __str__(self):
        return f"Cita #{self.id} - {self.doctor} - {self.fecha.strftime('%Y-%m-%d %H:%M')} - {self.id_mascota.nombre}"
 
class Tratamiento(models.Model):
    id = models.AutoField(primary_key=True)
    medicamento = models.CharField(max_length=255)
    aplicacion = models.TextField()
    fecha_inicio = models.DateField()
    fecha_finalizacion = models.DateField()
    id_cita = models.ForeignKey(Cita, on_delete=models.CASCADE, related_name='tratamientos')

    def __str__(self):
        return f"Tratamiento para {self.id_cita.id_mascota.nombre} - Medicamento: {self.medicamento}"
    
     
class Vacuna(models.Model):
    id = models.AutoField(primary_key=True)
    fecha = models.DateTimeField()
    veterinaria = models.CharField(max_length=255)
    doctor = models.CharField(max_length=255)
    medicamento = models.CharField(max_length=255)
    mascota = models.ForeignKey(Mascota, on_delete=models.CASCADE, related_name='vacunas')

    def __str__(self):
        return f'Vacuna de {self.medicamento} para {self.mascota.nombre} el {self.fecha.strftime("%d-%m-%Y")}'

    class Meta:
        verbose_name = "Vacuna"
        verbose_name_plural = "Vacunas"


class Appointments(models.Model):
    name = models.CharField(max_length= 200)
    start_date = models.DateField()
    end_date = models.DateField()
    comments = models.CharField(max_length= 500, blank=True, null=True)
    status = models.CharField(max_length= 100)
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now = True)
    mascota = models.ForeignKey(Mascota, on_delete=models.CASCADE, related_name='vacunas')

    def __str__(self):
        return self.name
## Vistas Calendar

from rest_framework import viewsets, permissions 
from .serializers import *
from rest_framework.response import Response 
from .models import * 

class AppointmentViewset(viewsets.ViewSet): 
    permission_classes = [permissions.AllowAny]
    queryset = Appointments.objects.all()
    serializer_class = AppointmentSerializer

    def create(self,request):
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        else: 
            return Response(serializer.errors, status=400)

    def list(self, request):
        queryset = Appointments.objects.all()
        serializer = self.serializer_class(queryset, many=True)
        return Response(serializer.data)
    
    def retrieve(self, request, pk=None):
        queryset = self.queryset.get(pk=pk)
        serializer = self.serializer_class(queryset)
        return Response(serializer.data)

## usuario 

from django.db import models
from django.utils import timezone

# Create your models here.

class Usuario(models.Model):
    nombre = models.CharField(max_length=255)
    apellido = models.CharField(max_length=255)
    imagen = models.ImageField(upload_to='imagenes_usuarios/', blank=True, null=True)
    correo_electronico = models.EmailField(unique=True)
    contrasena = models.CharField(max_length=255)
    numero_telefono = models.CharField(max_length=20, blank=True, null=True)
    direccion = models.CharField(max_length=255, blank=True, null=True)
    ciudad = models.CharField(max_length=100, blank=True, null=True)
    pais = models.CharField(max_length=100, blank=True, null=True)
    fecha_nacimiento = models.DateField(blank=True, null=True)
    genero = models.CharField(max_length=50, blank=True, null=True)
    fecha_registro = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f'{self.nombre} {self.apellido}'

    class Meta:
        verbose_name = "Usuario"
        verbose_name_plural = "Usuarios"


class EstadoUsuario(models.Model):
    usuario = models.OneToOneField(Usuario, on_delete=models.CASCADE, related_name='estado_usuario')
    activo = models.BooleanField(default=True)
    fecha_ultima_actividad = models.DateTimeField(default=timezone.now)
    fecha_inactividad = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        estado = 'Activo' if self.activo else 'Inactivo'
        return f'{self.usuario.nombre} {self.usuario.apellido} - {estado}'

    class Meta:
        verbose_name = "Estado de Usuario"
        verbose_name_plural = "Estados de Usuario"
        
